#!/bin/bash

########################################
#  Script name: mongo_db_refresh
#  Script description: Restore mongo DB from s3 backup (last or desired) to local mongodb server.
#  (C) 2016 andrei.caraion@clevertech.biz
########################################

export LC_ALL=C

# Default variables
red='\033[0;31m'
yellow='\033[1;33m'
green='\033[0;32m'
lblue='\033[1;34m'
NC='\033[0m'

tmp_dir='/tmp/mongo/'
s3_path='s3://ai-db-backup/ai-pearson-prod-db/'
db_name='ai-stag'

# Defning helper function
print_usage() {
    echo
    echo "Usage: $(basename $0) [OPTIONS]"
    echo "  -l, --list-backups      List all backups from S3"
    echo "  -a, --archive-name      Archive name (base name)"
    echo "  -d, --db-name           DB name arg (local DB)"
    echo "  -v, --verbose           Verbose mode"
    echo "  -N, --no-color          No color output"
    echo "  -H, --help              Print this help"
    echo
    exit 1
}

debug() {
    message=$1
    if [ -n "${verbose}" ]; then
         echo -e "${message}"
    fi
}

# Translating argument to --gnu-long-options
for arg; do
    delim=""
    case "${arg}" in
        --list-backups)               args="${args}-l " ;;
        --archive-name)               args="${args}-a " ;;
        --db-name)                    args="${args}-d " ;;
        --verbose)                    args="${args}-v " ;;
        --no-color)                   args="${args}-N " ;;
        --help)                       args="${args}-H " ;;
        *)                      [[ "${arg:0:1}" == "-" ]] || delim="\""
                                args="${args}${delim}${arg}${delim} ";;
    esac
done
eval set -- "$args"

# Parsing arguments
while getopts "la:d:vNH" Option; do
    case ${Option} in
        l) list_backups='list' ;;
        a) archive_name=${OPTARG} ;;
        d) db_name=${OPTARG} ;;
        v) verbose="f" ;;
        N) red='' ;
           yellow='' ;
           green='' ;
           lblue='' ;
           NC='';;
        *) print_usage; check_result 1 "bad args" ;;
    esac
done


if [ -n "${list_backups}" ]; then
    s3cmd ls ${s3_path} | grep "mongo-[0-9][0-9]-[0-9][0-9]-[0-9][0-9]_[0-9][0-9]-[0-9][0-9].tar.gz" | sort -k1,2 | awk '{print $4}' | cut -d '/' -f 5
    exit 0
fi

# get file info
if [ -z ${archive_name} ]; then
    # get last file
    s3_file=$( s3cmd ls ${s3_path} | grep "mongo-[0-9][0-9]-[0-9][0-9]-[0-9][0-9]_[0-9][0-9]-[0-9][0-9].tar.gz" | sort -k1,2 | tail -1 | awk '{print $4}' )
else
    s3_file="${s3_path}${archive_name}"
fi
local_file=$(basename ${s3_file})

debug "${lblue}INFO:${NC} S3 file is ${s3_file}"
debug "${lblue}INFO:${NC} Local archive is ${local_file}"

mkdir -p ${tmp_dir} 2>/dev/null
cd ${tmp_dir}

debug "${lblue}INFO:${NC} Get ${s3_file}"
s3cmd get ${s3_file}

debug "${lblue}INFO:${NC} Unpack ${local_file}"
tar -zxv${verbose} ${local_file}
rm -rf ${tmp_dir}/backup/mongo/ai-prod/pearson_vrs_phone_tests*
rm -rf ${tmp_dir}/backup/mongo/ai-prod/pearson_vrs_web_tests*

mongorestore --db ${db_name} --drop ${tmp_dir}/backup/mongo/ai-prod/
cd -
rm -r ${tmp_dir}
